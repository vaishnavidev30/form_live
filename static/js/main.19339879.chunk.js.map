{"version":3,"sources":["logo.svg","components/FormPage.js","App.js","serviceWorker.js","index.js"],"names":["FormPage","props","useForm","register","handleSubmit","control","errors","formState","useState","result","setResult","Card","onSubmit","data","alert","console","log","required","placeholder","Firstname","type","style","marginBottom","Lastname","Email","render","field","RadioGroup","display","width","FormControlLabel","value","Radio","label","float","margin","Courses","rows","Bio","Button","marginTop","marginRight","EmailShareButton","url","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qMAAe,I,oGCgBA,SAASA,EAAUC,GAAQ,IAAD,UACvC,EAAmEC,cAA3DC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,QAAsBC,EAAtD,EAAyCC,UAAaD,OACtD,EAA4BE,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAQM,OAEO,cAACC,EAAA,EAAD,UAEA,uBAAMC,SAAUR,GATZ,SAACS,GAChBC,MAAM,kBACNJ,EAAUG,GACZE,QAAQC,IAAI,SAASP,MAMR,UAEL,8CACA,iDAAWN,EAAS,YAAa,CAAEc,UAAU,KAA7C,IAAsDC,YAAY,gBACrC,cAA3B,UAAAZ,EAAOa,iBAAP,eAAkBC,OAAuB,mBAAGC,MAAO,CAAEC,aAAc,OAA1B,uBAC5C,6CACC,iDAAWnB,EAAS,WAAY,CAAEc,UAAU,KAA5C,IAAqDC,YAAY,eACrC,cAA1B,UAAAZ,EAAOiB,gBAAP,eAAiBH,OAAuB,mBAAGC,MAAO,CAAEC,aAAc,OAA1B,uBAKlD,0CACA,+CAAOF,KAAK,SAAYjB,EAAS,QAAS,CAAEc,UAAU,KAAtD,IAA+DC,YAAY,WAC3C,cAAvB,UAAAZ,EAAOkB,aAAP,eAAcJ,OAAuB,mBAAGC,MAAO,CAAEC,aAAc,OAA1B,uBAEtC,gCACE,2CACA,cAAC,IAAD,CACEjB,QAASA,EACToB,OAAQ,cAAGC,MAAH,OACN,eAACC,EAAA,EAAD,yBAAY,aAAW,UAAYxB,EAAS,SAAU,CAAEc,UAAU,KAAlE,IAA2EI,MAAO,CAAEO,QAAS,eAAgBC,MAAO,QAApH,UACE,cAACC,EAAA,EAAD,CACEC,MAAM,SACN1B,QAAS,cAAC2B,EAAA,EAAD,IACTC,MAAM,SACNZ,MAAO,CAAEa,MAAO,OAAQC,OAAQ,KAElC,cAACL,EAAA,EAAD,CACEC,MAAM,OACN1B,QAAS,cAAC2B,EAAA,EAAD,IACTC,MAAM,OACNZ,MAAO,CAAEa,MAAO,OAAQC,OAAQ,eAQ1C,gCACA,4CACA,mDAAYhC,EAAS,UAAW,CAAEc,UAAU,KAA5C,IAAsDI,MAAO,CAAEQ,MAAO,QAAtE,UACE,wBAAQE,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,MAAd,wBAGwB,cAAzB,UAAAzB,EAAO8B,eAAP,eAAgBhB,OAAuB,mBAAGC,MAAO,CAAEC,aAAc,OAA1B,uBACxC,wCACA,oDAAcnB,EAAS,MAAO,CAAEc,UAAU,KAA1C,IAAmDC,YAAY,MAAMmB,KAAM,KACrD,cAArB,UAAA/B,EAAOgC,WAAP,eAAYlB,OAAuB,mBAAGC,MAAO,CAAEC,aAAc,OAA1B,kCACpC,cAACiB,EAAA,EAAD,CAAQnB,KAAK,SAASC,MAAO,CAAEC,aAAc,OAAOkB,UAAU,OAAQC,YAAY,QAAlF,oBAGA,cAACF,EAAA,EAAD,UACA,cAAEG,EAAA,EAAF,CAAmBC,IAAK,iDAAxB,oCCrDKC,MAxBf,WACE,OAEI,cAAC,IAAD,UAYA,eAAC,IAAD,WACA,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAGC,UAAW/C,IAChC,cAAC,IAAD,CAAO8C,KAAK,eAAeC,UAAW/C,UCfxBgD,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCVRC,IAAS5B,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEF6B,SAASC,eAAe,SDuHlB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.19339879.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\r\nimport { Button ,Card} from 'react-bootstrap';\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport {\r\n  EmailShareButton,\r\n  EmailIcon,\r\n  FacebookShareButton,\r\n} from \"react-share\";\r\n\r\nimport {\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n} from \"@material-ui/core\";\r\n\r\n\r\nexport default function FormPage (props) {\r\n  const { register, handleSubmit, control, formState: { errors } } = useForm();\r\n  const [result, setResult] = useState(\"\");\r\n\r\n\r\n  const onSubmit = (data) => {\r\n    alert(\"form submitted\");\r\n    setResult(data)\r\n  console.log(\"result\",result);\r\n  }\r\n        return (\r\n           \r\n               <Card >\r\n               \r\n               <form onSubmit={handleSubmit(onSubmit)}>\r\n        \r\n          <label >FirstName</label>\r\n          <input {...register(\"Firstname\", { required: true })} placeholder=\"First name\" />\r\n           {errors.Firstname?.type === 'required' && <p style={{ marginBottom: '3px' }}> required</p>}\r\n         <label >Lastname</label>\r\n          <input {...register(\"Lastname\", { required: true })} placeholder=\"Last name\" />\r\n           {errors.Lastname?.type === 'required' && <p style={{ marginBottom: '3px' }}> required</p>}\r\n         \r\n         \r\n        \r\n         \r\n  <label >Email</label>\r\n  <input type=\"email\" {...register(\"Email\", { required: true })} placeholder=\"Email\" />\r\n          {errors.Email?.type === 'required' && <p style={{ marginBottom: '3px' }}> required</p>}\r\n         \r\n          <div>\r\n            <label>Gender</label>\r\n            <Controller\r\n              control={control}\r\n              render={({ field }) => (\r\n                <RadioGroup aria-label=\"Gender\"{...register(\"Gender\", { required: true })} style={{ display: 'inline-block', width: '100%' }}>\r\n                  <FormControlLabel\r\n                    value=\"Female\"\r\n                    control={<Radio />}\r\n                    label=\"Female\"\r\n                    style={{ float: 'left', margin: 0 }}\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"Male\"\r\n                    control={<Radio />}\r\n                    label=\"Male\"\r\n                    style={{ float: 'left', margin: 0 }}\r\n                  />\r\n                </RadioGroup>\r\n              )\r\n              }\r\n            />\r\n          </div>\r\n         \r\n          <div> \r\n          <label>Courses</label>\r\n          <select {...register(\"Courses\", { required: true })}  style={{ width: '100%' }} >\r\n            <option value=\"BBA\">BBA</option>\r\n            <option value=\"B.Sc\">B.Sc</option>\r\n            <option value=\"BCA\">BCA</option>\r\n          </select>\r\n          </div>\r\n          {errors.Courses?.type === 'required' && <p style={{ marginBottom: '3px' }}> required</p>}\r\n          <label>Bio</label>\r\n          <textarea {...register(\"Bio\", { required: true })} placeholder=\"Bio\" rows={3} />\r\n          {errors.Bio?.type === 'required' && <p style={{ marginBottom: '3px' }}>Bio name is required</p>}\r\n          <Button type=\"submit\" style={{ marginBottom: '20px',marginTop:'20px' ,marginRight:'15px'}}>\r\n            Submit\r\n          </Button>\r\n          <Button>\r\n          < EmailShareButton url={'https://accounts.google.com/b/0/AddMailService'}>\r\n  Share via Email\r\n</ EmailShareButton>\r\n</Button>\r\n        </form>\r\n      </Card>\r\n           \r\n        )\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route, Switch,Link } from \"react-router-dom\";\nimport Home from './components/Home';\nimport FormPage from './components/FormPage';\n\nfunction App() {\n  return (\n    \n      <Router>\n         {/* <header >\n        <Navbar variant=\"light\" bg=\"light\" >\n            <Nav className=\"justify-content-end\">\n              <Nav>\n                <Link to={\"/create-form\"} className=\"nav-link\">\n                  form\n                </Link>\n              </Nav>\n            </Nav>\n        </Navbar>\n      </header> */}\n      <Switch>\n      <Route exact path=\"/\"component={FormPage} />\n      <Route path=\"/create-form\" component={FormPage} />\n    </Switch>\n      </Router>\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}